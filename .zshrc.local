START=`date +%s%N | cut -b1-13`
# add user functions
START=$(date +%s.%N)
fpath=( ~/.zfunctions "${fpath[@]}" )

# Set up the prompt

autoload -Uz promptinit
promptinit
prompt pure

setopt histignorealldups sharehistory
setopt autocd

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history

# Use modern completion system
autoload -Uz compinit
compinit

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select
#zstyle ':completion:*' menu select=2
eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
#zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi
#alias ll='ls -alF'
#alias ll='ls++ --ptsf -tralF'
alias ll='ls++ --ptsf -al'
alias lt='ls++ --ptsf -tral'
alias ldt='lt -d */'
alias ldl='ll -d */'
#alias ll='ls++ --ptsf -lF'
alias la='ls -A'
alias l='ls -CF'
alias vz='v ~/.zshrc.local'
alias vv='v ~/.vimrc'
alias vi3='v ~/.config/i3/config'
alias sz='source ~/.zshrc'
alias ffun='f() { vim $(grep -lR $1 . | peco) }; f' 
alias vim='echo -ne "\e]50;CursorShape=0;BlinkingCursorEnabled=0\\x7"; vim -c "highlight Comment cterm=italic"' 
#alias v='vim' 
alias vl='v $(ls -t . | head -1)'
alias sv='sudo vim' 
alias pwdc='pwd | tr -d "\n" | xclip -selection clipbloard'
alias g='git'
# source ~/.bash_profile
ffind() {
   find . -name "*$1*"
};

#zstyle ':prompt:grml:*:items:percent' '$'
export KEYTIMEOUT=1
#export PATH="/home/oscar/Android/Sdk/platform-tools:$PATH"
#export PATH="/usr/local/cuda-8.0/bin:$PATH"
#export LD_LIBRARY_PATH="/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH"
export NDK_ROOT="/home/oscar/Android/Sdk/ndk-bundle"

function zle-keymap-select zle-line-init zle-line-finish {
  case $KEYMAP in
      vicmd)      print -n '\033[1 q';; # block cursor
      viins|main) print -n '\033[5 q';; # line cursor
  esac
}

zle -N zle-line-init
zle -N zle-line-finish
zle -N zle-keymap-select

zle-line-init () {
    zle -K viins
}


bindkey -v
alias rekeys="setxkbmap -layout us -variant altgr-intl -option ctrl:nocaps && xset r rate 200 40 && killall xcape && xcape -t 200 -e 'Control_L=Escape'"
#transfer() { if [ $# -eq 0 ]; then echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"; return 1; fi 
   #tmpfile=$( mktemp -t transferXXX ); if tty -s; then basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g'); curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile; else curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile ; fi; cat $tmpfile; rm -f $tmpfile; } 
#ix() {
      #local opts
      #local OPTIND
      #[ -f "$HOME/.netrc" ] && opts='-n'
      #while getopts ":hd:i:n:" x; do
         #case $x in
            #h) echo "ix [-d ID] [-i ID] [-n N] [opts]"; return;;
            #d) $echo curl $opts -X DELETE ix.io/$OPTARG; return;;
            #i) opts="$opts -X PUT"; local id="$OPTARG";;
            #n) opts="$opts -F read:1=$OPTARG";;
         #esac
      #done
      #shift $(($OPTIND - 1))
      #[ -t 0 ] && {
      #local filename="$1"
      #shift
      #[ "$filename" ] && {
      #curl $opts -F f:1=@"$filename" $* ix.io/$id
      #return
   #}
   #echo "^C to cancel, ^D to send."
#}
#curl $opts -F f:1='<-' $* ix.io/$id
        #}
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source ~/.zshrc.local.extra
# For ls++
PATH="/home/oscar/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="/home/oscar/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/home/oscar/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/home/oscar/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/home/oscar/perl5"; export PERL_MM_OPT;

# Find by file-name and edit
#vf () {
    #find . -type f -name "$1" -exec vim {} \+
#}

# Find by file-name and change dir
#cf () {
    #if [[ -d "$1" ]]; then
        #cd -- "$(find . -name "$1" -type d -print -quit 2>/dev/null)"
    #else  # file, symbolic link, etc...
        #local file_abs_path="$(find . -name "$1" -print -quit 2>/dev/null)"
        #cd -- "$(dirname $file_abs_path)"
    #fi
#}

source ~/repos_ajenos/z/z.sh

autoload bashcompinit
bashcompinit
#eval "$(register-python-argcomplete wgin)"
#source /etc/bash_completion.d/python-argcomplete.sh

export LD_LIBRARY_PATH="/usr/local/lib/:$LD_LIBRARY_PATH"
#dcleanup(){
    #local containers
    #containers=( $(docker ps -aq 2>/dev/null) )
    #docker rm "${containers[@]}" 2>/dev/null
    #local volumes
    #volumes=( $(docker ps --filter status=exited -q 2>/dev/null) )
    #docker rm -v "${volumes[@]}" 2>/dev/null
    #local images
    #images=( $(docker images --filter dangling=true -q 2>/dev/null) )
    #docker rmi "${images[@]}" 2>/dev/null
#}
export $(dbus-launch)

#dcleanup(){
    #local containers
    #containers=( $(docker ps -aq 2>/dev/null) )
    #docker rm "${containers[@]}" 2>/dev/null
    #local volumes
    #volumes=( $(docker ps --filter status=exited -q 2>/dev/null) )
    #docker rm -v "${volumes[@]}" 2>/dev/null
    #local images
    #images=( $(docker images --filter dangling=true -q 2>/dev/null) )
    #docker rmi "${images[@]}" 2>/dev/null
#}

alias diff="colordiff"
# Git stuff
#alias gitCleanMergedFeatures="git branch -r --merged \
    #| grep /feature/  \
    #| cut -d '/' -f 2-  \
    #| xargs -rn1 git push origin --delete"

#alias gitRenameBranch='f() {git checkout feature/$1 && \
   #git branch -m feature/$1 $1 && \
   #git push origin :feature/$1 && \
   #git push --set-upstream origin $1 && \
   #git checkout develop && \
   #git branch -d $1 };f'

## archives branch as a tag
#alias gitArchiveBranch='f() { \
   #git tag archive/$1 origin/$1 && \
   #git push --tags && \
   #git push origin --delete $1;
#};f'

#alias gitDeleteLocalBranches='git branch | xargs git branch -d'

## gitChangeTagName <old> <new>
#alias gitChangeTagName='f() { \
   #git tag $2 $1 && \
   #git tag -d $1 && \
   #git push origin :refs/tags/$1 && \
   #git push --tags 
#};f'

#alias quitjupyter='kill $(pgrep jupyter)'
#alias jupyter='quitjupyter; jt -t chesterish && jupyter notebook --NotebookApp.iopub_data_rate_limit=10000000 &> /dev/null &!'

#alias quittensorboard="kill $(ps aux | grep 'tensorboard.py' | awk '{print $2;}')"

#killName() {
   #kill $(ps aux | grep "$1" | awk '{print $2;}')
#}

#runTensorboard() {
   #quittensorboard ||
   #tensorboard --logdir $1 &> /dev/null &!
#}

#getSymbols() { 
   #readelf -s --wide $1 | awk '{print $NF }'
#}

# Recursively show dependencies of dynamic libs (in the same folder)
#wdep2() {
   #if [ -z "$1" ]; then
      #return
   #fi
   #if [ ! -f $1 ]; then
       #echo "File $1 not found!"
       #return
   #fi
   #echo "WDEP2 is looking for deps of $1"
   #toVisit=""
   #visited=""
   ##echo $1 >> toVisit
   #toVisit="${toVisit}$1"
   ## While there's more to visit
   #while [ ! -z "$toVisit" ]; do
      ## Get first line and remove it
      #line=$(echo $toVisit | head -n 1)
      ##echo "line is $line "
      #toVisit=`echo $toVisit | sed -n '1!p' `
      #if [ -z "$line" ]; then
         #continue
      #fi
      ##echo "visiting = $line"
      ## Put it in visited
      #echo $line >> visited
      #visited="${visited}\n$line"
      #if [ ! -f $line ]; then
         #echo "FILE $line is missing!!"
      #else
         #deps=`readelf -d $line | grep "NEEDED" | sed -r 's/.*\[//' | sed -r 's/\]//'`
         #while read -r line; do
           ## Check if any of the dependencies is not on the list already
           #if [[ $visited = *"$line"* ]]; then
             ##echo "It's there!"
           #else
              #if [[ $toVisit = *"$line"* ]]; then
                 ##echo "It's already there to visit"
              #else
                 ##echo "adding $line"
                 #toVisit="${toVisit}\n$line"
              #fi
           #fi
         #done <<< "$deps"
      #fi
   #done
   #echo "Libs that are PRESENT already"
   #echo $visited
   #echo "Finished!"
#}

# taken from http://owen.cymru/sf-a-quick-way-to-search-for-some-thing-in-bash-and-edit-it-with-vim-2/
sf() {
  if [ "$#" -lt 1 ]; then echo "Supply string to search for!"; return 1; fi
  search=`printf "%q" "$*"`
  include="yml,js,json,php,md,styl,pug,jade,html,config,py,cpp,h,hpp,c,cl,java,go,hs,rb,conf,fa,lst,txt,mm,m,swift,txt,gradle,tex,sh,Makefile,cc"
  exclude=".d,.o,.config,.git,node_modules,vendor,build,yarn.lock,*.sty,*.bst,*.coffee,dist,pdf"
  rg_command='rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --color "always" -g "*.{'$include'}" -g "!{'$exclude'}/*"'
  files=`eval $rg_command $search | fzf --ansi --multi --reverse | awk -F ':' '{print $1":"$2":"$3}'`
  [[ -n "$files" ]] && ${EDITOR:-vim} $files
}
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

imshow() { 
   if [ "$#" -eq 0 ]; then
      nohup xnviewmp $PWD &> /dev/null & 
   else
      nohup xnviewmp $1 &> /dev/null & 
   fi
};

gimp() { 
   if [ "$#" -eq 0 ]; then
      nohup gimp &> /dev/null & 
   else
      nohup gimp $1 &> /dev/null & 
   fi
};

#alias asciicast2gif='docker run --rm -v $PWD:/data asciinema/asciicast2gif'
export SHELL='/usr/bin/zsh'

#shoot() {
    #kill -9 $(xprop _NET_WM_PID | awk '{ print $3 }')
#}

#alias adblock="adb shell input keyevent 26"

alias ipython="ipython --TerminalInteractiveShell.editing_mode=vi"
export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig/" 
#alias mkthesis="latexmk -pdf -f main.tex && evince main.pdf 2> /dev/null &"
export HALIDE_ROOT=/home/ogomez/repos_ajenos/Halide_prebuilt/halide
export PATH=$PATH:/usr/local/bin
export JAVA_HOME=/opt/android-studio/jre/

#alias pikaurRemoveOrphans="pikaur -Rns $(pikaur -Qtdq | tr '\n' ' ')"
#alias pikaurListBySize="LC_ALL=C pikaur -Qi | awk '/^Name/{name=$3} /^Installed Size/{print $4$5, name}' | sort -h"
#pikaurListByNumberOfDependencies() {
   #output=''
   #packages=`pikaur -Q | awk '{print $1}'`
   #while IFS= read -r package; do
       #line="$package `pactree -l $package | wc -l`"
       #output="$output\n$line"
   #done <<< "$packages"
   #echo $output | sort -k2 -n
#}

alias icat="kitty +kitten icat"
END=$(date +%s.%N)
DIFF=$(echo "$END - $START" | bc)
#echo $DIFF

END=`date +%s%N | cut -b1-13`
#echo "Time elapsed: $((END - START)) milliseconds"
