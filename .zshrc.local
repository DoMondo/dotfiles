# add user functions
fpath=( ~/.zfunctions "${fpath[@]}" )

# Set up the prompt

autoload -Uz promptinit
promptinit
prompt pure

setopt histignorealldups sharehistory

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history

# Use modern completion system
autoload -Uz compinit
compinit

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select
#zstyle ':completion:*' menu select=2
eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
#zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi
#alias ll='ls -alF'
#alias ll='ls++ --ptsf -tralF'
alias ll='ls++ --ptsf -al'
alias lt='ls++ --ptsf -tral'
#alias ll='ls++ --ptsf -lF'
alias la='ls -A'
alias l='ls -CF'
alias vz='v ~/.zshrc.local'
alias vv='v ~/.vimrc'
alias vi3='v ~/.config/i3/config'
alias sz='source ~/.zshrc'
alias ffun='f() { vim $(grep -lR $1 . | peco) }; f' 
alias vim='echo -ne "\e]50;CursorShape=0;BlinkingCursorEnabled=0\\x7"; vim -c "highlight Comment cterm=italic"' 
alias v='vim' 
alias pwdc='pwd | tr -d "\n" | xclip'
alias g='git'
# source ~/.bash_profile
alias ffind='f() { grep -Hri $1 . };f'

#zstyle ':prompt:grml:*:items:percent' '$'
export KEYTIMEOUT=1
#export PATH="/home/oscar/Android/Sdk/platform-tools:$PATH"
#export PATH="/usr/local/cuda-8.0/bin:$PATH"
#export LD_LIBRARY_PATH="/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH"
export NDK_ROOT="/home/oscar/Android/Sdk/ndk-bundle"

zle-keymap-select () {
  case $KEYMAP in
    vicmd) echo -ne "\e]50;CursorShape=0;BlinkingCursorEnabled=0\\x7";; # block cursor
    viins|main) echo -ne "\e]50;CursorShape=1;BlinkingCursorEnabled=1\\x7";; # less visible cursor
  esac
}

zle -N zle-keymap-select

zle-line-init () {
    zle -K viins
}

zle -N zle-line-init

bindkey -v
alias rekeys="setxkbmap -layout us -variant altgr-intl -option ctrl:nocaps && xset r rate 200 40 && killall xcape && xcape -t 200 -e 'Control_L=Escape'"
transfer() { if [ $# -eq 0 ]; then echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"; return 1; fi 
   tmpfile=$( mktemp -t transferXXX ); if tty -s; then basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g'); curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile; else curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile ; fi; cat $tmpfile; rm -f $tmpfile; } 
ix() {
      local opts
      local OPTIND
      [ -f "$HOME/.netrc" ] && opts='-n'
      while getopts ":hd:i:n:" x; do
         case $x in
            h) echo "ix [-d ID] [-i ID] [-n N] [opts]"; return;;
            d) $echo curl $opts -X DELETE ix.io/$OPTARG; return;;
            i) opts="$opts -X PUT"; local id="$OPTARG";;
            n) opts="$opts -F read:1=$OPTARG";;
         esac
      done
      shift $(($OPTIND - 1))
      [ -t 0 ] && {
      local filename="$1"
      shift
      [ "$filename" ] && {
      curl $opts -F f:1=@"$filename" $* ix.io/$id
      return
   }
   echo "^C to cancel, ^D to send."
}
curl $opts -F f:1='<-' $* ix.io/$id
        }
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source ~/.zshrc.local.extra
# For ls++
PATH="/home/oscar/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="/home/oscar/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/home/oscar/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/home/oscar/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/home/oscar/perl5"; export PERL_MM_OPT;

# Find by file-name and edit
vf () {
    find . -type f -name "$1" -exec vim {} \+
}

# Find by file-name and change dir
cf () {
    if [[ -d "$1" ]]; then
        cd -- "$(find . -name "$1" -type d -print -quit 2>/dev/null)"
    else  # file, symbolic link, etc...
        local file_abs_path="$(find . -name "$1" -print -quit 2>/dev/null)"
        cd -- "$(dirname $file_abs_path)"
    fi
}

source ~/repos_ajenos/z/z.sh

autoload bashcompinit
bashcompinit
eval "$(register-python-argcomplete wgin)"
source /etc/bash_completion.d/python-argcomplete.sh

export LD_LIBRARY_PATH="/usr/local/lib/:$LD_LIBRARY_PATH"
dcleanup(){
    local containers
    containers=( $(docker ps -aq 2>/dev/null) )
    docker rm "${containers[@]}" 2>/dev/null
    local volumes
    volumes=( $(docker ps --filter status=exited -q 2>/dev/null) )
    docker rm -v "${volumes[@]}" 2>/dev/null
    local images
    images=( $(docker images --filter dangling=true -q 2>/dev/null) )
    docker rmi "${images[@]}" 2>/dev/null
}
unset DBUS_SESSION_BUS_ADDRESS
export DBUS_SESSION_BUS_ADDRESS

eval $(thefuck --alias)

alias diff="colordiff"
# Git stuff
alias gitCleanMergedFeatures="git branch -r --merged \
    | grep /feature/  \
    | cut -d '/' -f 2-  \
    | xargs -rn1 git push origin --delete"

alias gitRenameBranch='f() {git checkout feature/$1 && \
   git branch -m feature/$1 $1 && \
   git push origin :feature/$1 && \
   git push --set-upstream origin $1 && \
   git checkout develop && \
   git branch -d $1 };f'

# archives branch as a tag
alias gitArchiveBranch='f() { \
   git tag archive/$1 origin/$1 && \
   git push --tags && \
   git push origin --delete $1;
};f'

alias gitDeleteLocalBranches='git branch | xargs git branch -d'

# gitChangeTagName <old> <new>
alias gitChangeTagName='f() { \
   git tag $2 $1 && \
   git tag -d $1 && \
   git push origin :refs/tags/$1 && \
   git push --tags 
};f'

alias quitjupyter='kill $(pgrep jupyter)'
alias jupyter='quitjupyter; jt -t chesterish && jupyter notebook --NotebookApp.iopub_data_rate_limit=10000000 &> /dev/null &!'
